
from typing import List, Literal, TypedDict, Optional
from typing_extensions import Annotated

# --- Type Definitions for Data Structures ---

class Report(TypedDict):
    """A report on a specific topic, including key details."""
    report: str
    keyDetails: str

class GroupedReport(TypedDict):
    """A collection of similar reports to be treated as a single unit."""
    reports: List[str]
    keyDetails: List[str]

class PostGenerationInfo(TypedDict):
    """Information needed to generate a social media post."""
    reports: List[str]
    keyDetails: List[str]
    reason: str
    type: Literal["thread", "post"]

class GeneratedPostRun(TypedDict):
    """IDs for a successfully created post generation run."""
    type: Literal["thread", "post"]
    thread_id: str
    run_id: str
    
class CuratedData(TypedDict, total=False):
    """Represents the curated data from various sources."""
    tweetsGroupedByContent: Optional[List[dict]]
    redditPosts: Optional[List[dict]]
    generalContents: Optional[List[dict]]
    githubTrendingData: Optional[List[dict]]

# --- Reducer Functions for State ---

def concat_reports(
    left: List[Report] | None, right: List[Report] | None
) -> List[Report]:
    """Reducer function to concatenate lists of reports."""
    if not left:
        left = []
    if not right:
        right = []
    return left + right

def concat_ids_and_types(
    left: List[GeneratedPostRun] | None, right: List[GeneratedPostRun] | None
) -> List[GeneratedPostRun]:
    """Reducer function to concatenate lists of generated post run info."""
    if not left:
        left = []
    if not right:
        right = []
    return left + right

# --- State Definition for the Supervisor Graph ---

class SupervisorState(TypedDict):
    """
    The complete state of the social media supervisor graph.
    """
    
    # Data ingested and curated by the curate_data subgraph
    curatedData: CuratedData
    
    # A list of reports generated by the generate_report subgraph
    reports: Annotated[
        List[Report],
        concat_reports,
    ]
    
    # Reports after being grouped by topic similarity
    groupedReports: List[GroupedReport]
    
    # Reports grouped with a determined post type (thread or single post)
    reportAndPostType: List[PostGenerationInfo]
    
    # Final thread and run IDs for the generated posts
    idsAndTypes: Annotated[
        List[GeneratedPostRun],
        concat_ids_and_types,
    ]